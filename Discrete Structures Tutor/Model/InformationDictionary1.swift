import UIKit

class InformationDictionary1 {
    let lecture: [[String]] = [
        [
            "What is a proposition?",
            "A proposition is a sentence that declares a fact that is either true or false.",
            "We can assign propositions to variables that allow us to perform operations on them and to connect them with other propositions.",
            "For example, let us represent the proposition “it is raining today” with the variable p.",
            "The logical operator “Not,” or ¬, represents the inverse of the proposition it is placed before.\n\n~p is read as \"not p.\"",
            "You can make compound propositions by combining individual propositions with logical operators and/or connectors.",
            "Truth tables allow us to compare the truth value of propositions, often in conjunction with locial operators and connectors.",
            "The truth table below compares the values of p to ~p.",
            "The connector \"And,\" also known as a conjunction, is represented as ^.\n\nThe conjunction of two propositions, often represented as p^q, is only true when both p and q are true.\n\nEx: p = \"It is raining today.\" q = \"The ground is wet.\" p^q = \"It is raining today and the ground is wet.\"",
            "Truth table: AND operator",
            "The connector \"Or,\" also known as a disjunction, is represented as ∨. The disjunction of two propositions is true if either of them or both of them are true.\n\nEx: p = \"I own a house.\" \nq = \"I rent an apartment.\" \np∨q = \"I own a house or I own an apartment.\"",
            "Truth table: OR operator",
            "Exclusive or, also known as exclusive disjunction, is represented as ⊕. The exclusive disjunction of two propositions if one of them is true and the other is false.",
            "Truth table: XOR operator",
            "Composite statements can be formed by combining propositions and operators to create new statements.",
            "Compound statement truth table: (~p)∨(~q)",
            "The statement \"if p, then q\" is called an implication, and is represented \"p→q.\" It means that if p is true, then q is guaranteed to be true as well.\n\nEx: p = \"My head feels hot.\"\nq = \"I will take my temperature.\"\np→q = \"If my head feels hot, then I will take my temperature.\"",
            "Truth table: implication",
            "The last two rows of the previous table may have been confusing. Why is p→q true if p is false but q is true?\n\nJust because p implies q does not mean q depends on p. For example, just because I always take my temperature when my head feels hot, does not mean that taking my temperature is automatically a result of my head feeling hot. I took my temperature the other day as part of a COVID screening for a doctor's appointment even though my head felt normal.",
            "Similarly, why is p→q true if p and q are both false? If the hypothesis is false, then it is irrelevant if the conclusion is false too. Is the statement \"If my head feels hot, then I will take my temperature\" disproven if my head feels normal and I don't do anything? No.",
            "The only scenario capable of disproving the implication p→q is if p is true but q remains false.",
            "If we take the implication p→q, then the converse of that implication is q→p.\n\nIf p→q is a valid implication, that does not mean that the converse q→p is necessarily valid.",
            "p = \"I went for a long run.\"\nq = \"I burnt a lot of calories.\"\np→q = \"If I go for a long run, I will burn a lot of calories.\"\nq→p = \"If I burnt a lot of calories, it's because I went for a long run.\"\n\nObviously, the converse is not necessarily valid here. Maybe I burnt a lot of calories by playing basketball.",
            "The inverse of the implication p→q is ~p→~q.\n\nThis is also not logically equivalent to an implication.",
            "The contrapositive of the implication p→q is ~q→~p. The contrapositive is logically equivalent to the implication. If q is false, the only way that p→q retains its validity is if p was false as well.\n\nIf we know that a long run burns a lot of calories, and someone didn't burn a lot of calories, we know they didn't go on a long run.",
            "A biconditional/biimplication, represented by p↔q, means \"p if and only if q.\" p↔q is only true if both p and q are true, or if they are both false.\n\nEx: A triangle is isosceles (p) if and only if it has two congruent sides (q).",
            "Truth table: biconditional statement",
            "The biconditional statement p↔q is composed of the implication p→q and q→p.\n\nNote that the following are both true:\n\"If a triangle is isosceles, then it has two congruent sides.\"\n\"If a triangle has two congruent sides, then it is isosceles.\"",
            "A tautology is true no matter what the truth values are of the propositions comprising it.\n\nEx: My shirt is red or not red.\n\nThis statement will always be true, and my shirt's actual color is irrelevant to it.",
            "A contradiction is false no matter the truth values of the propositions comprising it.",
            "Two compound propositions are logically equivalent (represented by ≡) if they have the same truth value no matter the truth values of their inputs.\n\n(Put more technically, they are logically equivalent if their biconditional is a tautology.)",
            "Logical equivalence: ~p∨q ≡ p→q",
        ],
        [
            "A predicate is a statement involving a variable. A predicate is neither true nor false.",
            "Ex: x < 10\n\nx is the subject of the statement.\n\n\"is less than 10\" is the predicate of the statement.",
            "Such a statement can be written as P(x), in which P represents the predicate and x represents the variable/subject.",
            "When we give x a truth value, it becomes a proposition, and we can evaluate its truth value.\n\nFor x < 10, if we let x = 10, then it becomes the proposition 10 < 10, which has a truth value of false.",
            "P(x) represents 3x + 10 > 5\n\nP(5) is true. P(-5) is false.",
            "A predicate can have multiple variables.\n\nLet Q(x, y) represent x + y = 10.\n\nQ(3, 7) has a truth value of true.\n\nQ(0, 1) has a truth value of false.",
            "Predicates can be used to denote English statements. Let A(b, c) represent \"State B borders state C.\"\n\nThe truth value of A(California, Nevada) is true.\n\nThe truth value of A(Georgia, Wyoming) is false.",
            "Quantifiers allow us to make more precise statements about the range of elements over which a predicate is true.",
            "The universal quantifier, written as ∀, indicates that P(x) has a truth value of true for all values of x in the domain. We can write this as ∀ xP (x).\n\nIf an element is found which makes P(x) false, it is called a counterexample.",
            "Ex: P(x) denotes x > 3. ∀x P(x) denotes \"for every value of x, x > 3.\" This is a valid use of the universal quantifier, and the resulting proposition has a truth value of false.",
            "Universally qualified predicates have a truth value of either true or false; they are ultimately a form of proposition.",
            "You can combine universal quantification with logical operators.\n\nP(x): x is a human.\nQ(x): x is mortal.\n∀x(P(x) -> G(x)): All humans are mortal.",
            "The existential quantifier, ∃, denotes that there exists, or there is at least one value of x, that makes the predicate true. ∃x P(x) is thus also a proposition with a truth value of true or false.",
            "P(x): I have friends who are intelligent.\nQ(x): I have friends who are funny.\n\n∃x(P(x) ∧ Q(x)): I have at least one friend who is intelligent and funny.",
            "The quantifiers can be combined and used with multiple predicates to form more complex propositions.\n\nEx: ∀x ∃y (xy = 500)\n\nFor all values of x, there exists at least one value of y for which x times y = 500.\n\nAssuming that the domain is limited to real numbers, this statement is true.",
        ],
        [
            "An argument is a series of propositions. All of them except the last one are called premises; the last statement is called the conclusion.",
            "An argument is considered valid if the premises imply the conclusion.",
            "An argument form is an argument represented with symbolic logic and operators that will be valid no matter what propositions are substituted for the variables.",
            "Inference rules allow us to construct complex argument forms out of simple argument forms.",
            "Modus Ponens is a common rule of inference in which the premises are p and p -> q, and the conclusion is q.\n\nIf p is true, and p implies q, then q must be true as well.",
            "Ex: p = \"It is snowing.\"\nq = \"The roads will be closed.\"\np -> q = \"If it is snowing, then the roads will be closed.\"\n\nIf it is snowing, and the implication is true, then we can infer that the roads must be closed.",
            "Modus Tollens, also known as Denying the Consequent, states that the premises ~q and p -> q imply the conclusion ~p. \n\nIf p implies q, the only way q can be false is if p was false as well.",
            "Ex: Take the previous example. If the roads close when it snows, and the roads are open, we can conclude that it's not snowing.",
            "Hypothetical syllogism, also known as a chain argument, allows us to infer that if a premise implies a conclusion, and that conclusion serves as the premise implying a second conclusion, then the initial premise also implies the second conclusion.",
            "Let's say that whenever I get hungry, I eat food. Let's also say that whenever I eat food, I wash it down with some water. We can thereby conclude that if I get hungry, I will soon drink some water.",
            "Disjunctive syllogism states that if at least one of two propositions is be true (p∨q), and one of the propositions is false (~p), we can conclude that the other proposition is true.",
            "Example:\n\nToday is either a weekday or a weekend.\n\nIt is not a weekday.\n\nTherefore, today is a weekend.",
            "Addition states that p implies p∨q.",
            "Example:\n\nI will go to school.\n\nTherefore, I will either go to school or stay home.",
            "Simplification states that p∧q implies p.",
            "Example:\n\nI will eat a cookie and drink milk.\n\nTherefore, I will eat a cookie.",
            "Conjunction",
            "Resolution",
            "Example:\n\nI will live in California or I will live in Nevada.\nI will not live in Nevada or I will live in Arizona.\n\nTherefore, I will live in California or I will live in Arizona.",
            "Proof by cases",
            "If I go for a run, I will burn a lot of calories.\nIf I lift weights, I will burn a lot of calories.\nI went for a run or I lifted weights.\n\nTherefore, I burnt a lot of calories.",
            "Constructive dilemma",
            "If I drink milk, I will get a lot of calcium.\nIf I eat a banana, I will get a lot of potassium.\nI drank milk or ate a banana.\n\nTherefore, I either got a lot of calcium or potassium.",
            "Destructive dilemma",
            "If I take Math 101, then I will take Math 201.\nIf I take Chem 101, then I will take Chem 201.\nI did not take Math 201, or I did not take Chem 201.\n\nTherefore, I did not take Math 101 or I did not take Chem 101.",
            "Absorption",
            "If my bed is comfy, then I will take a nap.\n\nTherefore, if my bed is comfy, then my bed is comfy and I will take a nap.",
        ],
        [
            "A proof is a sequence of statements that constitute a valid argument to show that a theorem is true.\n\nA proof relies on axioms or postulates, statements assumed to be true, and uses the rules of inference to draw conclusions from them.",
            "In computer science, we generally use informal proofs in which not every step is explicitly stated. This makes the proofs shorter and easier to understand, but may also introduce errors.",
            "The most common type of proof is a direct proof.\n\nDirect proofs are done on statements that take the form p -> q. Assume that p is q, and then show why q must therefore be true.",
            "Example: show that the square of an odd number is an odd number.\n\nRephrased: If n is odd, then n^2 is odd.",
            "If n is odd, it can be represented as 2k + 1, in which k is some integer.\n\nn^2 = (2k + 1)^2\n\nn^2 = 4k^2+4k + 1 = 2(2k^2 + 2k) + 1\n\nSince 2k^2+2k must equal an integer, n^2 still takes the form 2k + 1 and is odd.",
            "Whereas a direct proof relies on the implication p -> q, an indirect proof relies on its contrapositive, ~q -> ~p.\n\nAn implication and its contrapositive are always logically equivalent.\n\nWe need to show that not q implies not p, and that will show that p implies q.",
            "Example: prove that if 3n + 2 is odd, then n must be odd.\n\nTo perform an indirect proof, we must show that ~q (n is even) implies ~p (3n + 2 is even).",
            "If n is even, then it can be set equal to two times an integer.\n\n3n + 2 = 3(2k) + 2\n\n= 6k + 2\n\n= 2(3k+1).\n\n3k + 1 must be an integer, so 3n + 2 is equal to two times an integer.",
            "We have shown that the contrapositive of the original implication is true, so the implication must be true as well.",
            "In a proof by contradiction, we assume that the statement p is false, and then prove that ~p is impossible.\n\nFor the implication p -> q, we would need to show that it is impossible for p to be true and q to be false.",
            "Example: if n is an integer and n^3 + 1 is odd, then n must be even. To prove this by contradiction, assume the opposite: that n^3 + 1 being odd proves that n is odd.",
            "If n is odd, we can write it as 2k + 1.\n\nn^3 + 1\n\n(2k + 1)^3 + 1\n\n8k^3+12k^2+6k+2\n\n2(4k^3+6k^2+3k+1)\n\nThus, we have rewritten n^3 + 1 in the format of an even integer, which contradicts the premise. It is not possible for n to be odd if n^3 + 1 is odd.",
            "A proof by counterexample is not technically a proof, but it is a simple way of demonstrating that a universal statement is false.",
            "Example: All primes are even.\n\nCounterexample: 2",
            "Remember: you can disprove something with a counterexample, but you cannot prove a universal statement with an example.",
        ],
        
        [
            "A counting problem asks how many different ways an event can occur.\n\nExample: How many combinations of numbers can occur if you roll a die four times?",
            "The fundamental counting principle states if a procedure can be broken into different stages, you can find the number of combinations by multiplying the number of ways each step can occur together.\n\nIn the aforementioned example, each roll has four possible results, so the number of combinations equals 6 * 6 * 6 * 6 = 1296.",
            "A permutation is an arrangement of items in a distinct order, aka with no repeating items.",
            "To find the number of permutations of n items taken r at a time, use the following formula.",
            "Example: how many permutations of numbers can you make with three digits?\n\nn = 10, because there are ten different digits available to you.\n\nr = 3 because you are taking them three at a time.\n\n5!/(5-3)! = 60",
            "A combination is a similar arrangement, except order doesn't matter, and items can repeat. \n\nFormula:",
            "Example: how many different five-card hands can be dealt from a standard deck of fifty-two cards?\n\nn = 52, r = 5\n\nCombinations = 52!/(5!(52-5)!) = 2,598,960",
        ],
        
        [
            "A set is a well-defined collection of distinct objects.\n\nEach of these are referred to as members or elements.\n\nA set can be described by listing elements, separated by commas, enclosed in braces.\n\nVowels = {a, e, i, o, u}",
            "If element A belongs to set S, this is written as:\n\nA ∈ S\n\nIf A is not a member of set S, it is written as:\n\nA ∉ S",
            "A = { x | x ∈ S, P(x) } or A = { x ∈ S | P(x)\n\nThis means that A is the set of all elements x within the set S that satisfy the property P",
            "Standard symbols represent sets of numbers common in proofs. A few of the commonest are:\n\nN: the set of all natural numbers (positive integers)\n\nZ: the set of all integers\n\nE: the set of all even integers",
            "A subset X of set Y contains only elements found within set Y.\n\nX ⊆ Y: X is a subset of Y\n\nX ⊄ Y: X is not a subset of Y",
            "The empty set contains no elements and is written ∅. It can be considered a subset of every set.",
            "Some sets are finite, and can be said to have an integer n elements.\n\nY = {1, 2, 3} is a finite set.\n\nSome sets are not finite, and are called infinite sets.\n\nZ, the set of all integers, is an infinite set.",
            "The cardinality of a set is how many distinct elements it includes.\n\nX = {1, 2, 3, 5, 0}\n\nThe cardinality of X, written as |X|, is 5.",
            "The power set of set X, written as P(x), is the set of all subsets of X.\n\nX = {1, 2}\n\nP(X) = {{∅}, {1}, {2}, {1, 2}}.\n\nNote that this is comparable to a permutation, not a combination, of X's elements.",
            "Operations can be performed on one or more sets to create new sets.",
            "The union of A and B, written A ∪ B, contains all elements that are in A, B, or both.\n\nA = {A, B, D, F, Z}\nB = {C, D, J, K}\nA ∪ B = {A, B, D, F, Z, C, J, K}",
            "The intersection of sets A and B, A ∩ B, contains all the elements that both A and B contain.\n\nA = {1, 5, 7, 9}\nB = {2, 5, 9}\nA ∩ B = {5, 9}",
            "If the intersection of two sets is the empty set, the two sets are considered disjoint.",
            "The difference of A and B, A - B, is a set containing all the elements of A except the elements that are also in B.\nA = {1, 2, 3, 4}\nB = {4, 5, 6, 7}\nA - B = {1, 2, 3}",
        ],
        
        [
            "A sequence is a list, usually of numbers, often following some type of pattern.\n\nEx: 1, 2, 3, 4",
            "A series is the sum gotten from adding a sequence of numbers following some pattern together.\n\nEx: 1 + 2 + 3 + 4 = 10",
            "An arithmetic sequence is a sequence in which the difference between consecutive numbers on the list is always the same.\n\nEx: 1, 2, 3, 4, 5 is an arithmetic sequence because 1 is being added each time.\n\n1, 2, 6, 8, 9 is not an arithmetic sequence because the consecutive elements change by variable amounts.",
            "To find the nth value in an arithmetic sequence, take the first value in the sequence and add the common difference times n - 1.",
            "The sum of an arithmetic series can be found with the following formula:\n\nS = n(a + b)/2\n\nS = sum\nn = number of terms\na = first term\nb = last term",
            "A geometric series is similar to an arithmetic series, except the next number is found by multiplying by a common ratio.\n\nEx: 1, 2, 4, 8: the sum is 15, and the common ratio is 15.",
            "With r = common ratio, you can find the nth term of a geometric sequence as follows: a(n) = a(1)r^(n-1)",
            "Sum of n terms of a geometric sequence:\n\nS = (a(1)*(r^n - 1))/(r - 1)",
        ],
        
        [
            "A relation describes ordered matches between elements of different sets. The most common type is ordered pairs between two sets, forming a binary relation.",
            "We can think of x and y coordinates as a binary relation, in which each of the x inputs outputs one or more y values.\n\n(-3, 4), (3, -1), (4, 3)\n\n-3 -> 4\n3 -> 1\n4 -> -1, 3",
            "Take the following relation:\n\n{(1, 0), (5, 4), (3, 2)\n\nThe domain is the set of all x-values in the relation.\n\nDomain = {1, 3, 2}",
            "The range is the set of all y-values in the relation.\n\nRange = {0, 2, 4}",
            "A function is a relation in which each input has exactly one output. If you take two sets, A and B, every value of A will correspond to one value of B. It is okay for multiple values of A to correspond to B or for certain values of B not to be \"pointed toward,\" but no value of A is allowed to be paired to more than one value of B.",
            "f(x) = 3x + 5 is an example of a function written in function notation. Here, x is the independent variable, and f(x) is the dependent variable.",
            "A function is one-to-one, or injective, if each value of X corresponds to exactly one value of Y. Each Y value can have only one X-pair, but there can be Y-values without an X-pair.",
            "A function is onto, or surjective, if every Y-value has at least one X-pair. It is possible that a Y-value may have multiple X-pairs",
            "A function is bijective if it is both injective and surjective. Each X-value points to a distinct Y-value, and there are no unpaired Y-values.",
            "If a function is bijective, then it is invertible (the order of each pair can be reversed while still being a valid function.",
            "To find the inverse of a bijective function, swap the x and the f(x) and solve for f(x).",
            "A composite function entails using the output of one function as the input for another.\n\nf(x) = 3x + 5\n\ng(x) = 2x\n\nf(g(3)) = 3(2(3)) + 5",
        ],
        
        [
            "1",
            "2",
        ]
    
    ]
    
    let image: [[UIImage?]] = [
        [
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            UIImage(named: "truthtable1"),
            nil,
            UIImage(named: "truthtable2"),
            nil,
            UIImage(named: "truthtable3"),
            nil,
            UIImage(named: "truthtable4"),
            nil,
            UIImage(named: "truthtable5"),
            nil,
            UIImage(named: "truthtable6"),
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            UIImage(named: "truthtable7"),
            nil,
            nil,
            nil,
            nil,
            UIImage(named: "truthtable8"),
        ],
        [
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
        ],
        
        [
            nil,
            nil,
            nil,
            nil,
            UIImage(named: "inference1"),
            UIImage(named: "truthtable9"),
            UIImage(named: "inference2"),
            UIImage(named: "truthtable10"),
            UIImage(named: "inference3"),
            nil,
            UIImage(named: "disjunctive-syllogism"),
            nil,
            UIImage(named: "addition"),
            nil,
            UIImage(named: "simplification"),
            nil,
            UIImage(named: "conjunction"),
            UIImage(named: "resolution"),
            nil,
            UIImage(named: "proof-by-cases"),
            nil,
            UIImage(named: "constructive-dilemma"),
            nil,
            UIImage(named: "destructive-dilemma"),
            nil,
            UIImage(named: "absorption"),
            nil,
        ],
        [
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
        ],
        
        [
            nil,
            nil,
            nil,
            UIImage(named: "permutations"),
            nil,
            UIImage(named: "combinations"),
            nil,
        ],
        
        [
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
        ],
        
        [
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
        ],
        
        [
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
            nil,
        ],
        
        [
            nil,
            UIImage(named: "inference1"),
        ],
    ]
}
